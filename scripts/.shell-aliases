acp() {
    local commit_path="${1:-""}"
    local commit_message="${2:-""}"
    
    if [[ $commit_path == "" ]]; then
        echo "\033[0;31mError: No commit path provided.\033[0m"
        return 1
    fi
    
    if [[ $commit_message == "" ]]; then
        echo "\033[0;31mError: No commit message provided.\033[0m"
        return 1
    fi
    
    echo "\033[0;32mAdded changes from: $commit_path\033[0m"
    
    git add $commit_path
    
    echo "\033[0;32mCommit message:\033[0m"
    echo "\t$commit_message"
    
    git commit -m "$commit_message"
    
    echo "\033[0;32mPushing changes to remote.\033[0m"
    
    git push
}

# create an rproj with defaults at current location
rproj () {
    # get the name of the current directory we're in
    local dirname=$(basename "$PWD")
    # check if file exists throw error
    if [ -f "$dirname.rproj" ]; then
        echo "\033[0;31mError: $dirname.rproj already exists.\033[0m"
        return 1
    fi
    touch $dirname.Rproj
    
    echo -n 'Version: 1.0
RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default
EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 4
Encoding: UTF-8
RnwWeave: Sweave
LaTeX: pdfLaTeX
AutoAppendNewline: Yes
    StripTrailingWhitespace: Yes' > $dirname.Rproj
    
    echo "\033[0;32mCreated Rproj file at:\n\t$PWD/$dirname.Rproj\033[0m"
}

# download_videos -l "https://example.com/video" -n "video name" -o "output_directory"
# download_videos -i "input_file.tsv" -o "output_directory"
download_videos() {
    local inputFile=""
    local outputDir=""
    local singleLink=""
    local singleVideoName=""
    local logFile="download-videos-$(date +%Y%m%d-%H%M%S).txt"
    
    # Parse command-line arguments using getopts
    while getopts ":i:o:l:n:" opt; do
        case $opt in
            i)
                inputFile="$OPTARG"
            ;;
            o)
                outputDir="$OPTARG"
            ;;
            l)
                singleLink="$OPTARG"
            ;;
            n)
                singleVideoName="$OPTARG"
            ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                return 1
            ;;
        esac
    done
    
    # Check if either input file or single link is provided
    if [[ -z "$inputFile" && -z "$singleLink" ]]; then
        echo "Error: Either an input file (-i) or a single link (-l) must be provided."
        return 1
    fi
    
    # Check if output directory is provided, otherwise use current directory
    if [[ -z "$outputDir" ]]; then
        outputDir="."
    fi
    
    # Create the output directory if it doesn't exist
    mkdir -p "$outputDir"
    
    # Function to download a single video
    download_video() {
        local url="$1"
        local videoName="$2"
        yt-dlp -S vcodec:h264,res,acodec:m4a -o "$outputDir/$videoName.%(ext)s" "$url"
        return $?
    }
    
    # Redirect stdout and stderr to the log file in a subshell
    {
        # Process single link if provided
        if [[ -n "$singleLink" ]]; then
            if [[ -z "$singleVideoName" ]]; then
                singleVideoName="$(basename "$singleLink")"
            fi
            
            echo "Downloading $singleLink..."
            if download_video "$singleLink" "$singleVideoName"; then
                echo "Downloaded $singleLink successfully."
            else
                echo "Failed to download $singleLink."
            fi
        fi
        
        # Process input file if provided
        if [[ -n "$inputFile" ]]; then
            # Main loop to process each URL
            while IFS=$'\t' read -r url videoName; do
                # Skip empty lines
                [[ -z "$url" ]] && continue
                
                echo "Downloading $url..."
                if download_video "$url" "$videoName"; then
                    echo "Downloaded $url successfully."
                else
                    echo "Failed to download $url."
                fi
            done < "$inputFile"
        fi
        
        echo "Download process completed."
        echo "Output saved to $logFile."
    } > >(tee -a "$logFile") 2>&1
    
    return 0
}
